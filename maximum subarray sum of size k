#include <bits/stdc++.h>
using namespace std;
#define int long long 
//APPROACH ONE USING TWO POINTERS




signed main()
{
	int n;
	int k;
	cin>>n>>k;
	int arr[n];
	int sum=0;
	for(int i =0; i<n; i++)
	{
		
		cin>>arr[i];
		if(i<=k-1)
		{
			sum+=arr[i]; // stores the sum of first window
		}
	}
	int ans=sum;
	int l=0; //left pointer
	int r=k-1;//right pointer
	
	while(l<n-k)
	{
		
		sum-=arr[l]; //subtracting the last element of window
		l++;
		r++;
		sum+=arr[r]; //adding the upcoming element in the window
		ans=max(ans,sum);
	}
	cout<<ans<<endl;
}









// APPROACH SECOND PREFIX SUM


signed main() {
	// your code goes here
	int n;
	cin>>n;
	int k;
	cin>>k;
	int arr[n];
	int pref[n];
	for(int i =0; i<n; i++)
	{
		cin>>arr[i];
		pref[i]=arr[i];
		if(i) pref[i]=pref[i-1]+arr[i];
	}
	int ans=-999999999;
	int a=0; //it is used as a left pointer in  calculating sum of subarray size k
	for(int i =k-1; i<n; i++) // i =k-1 for the first subarray sum
	{
		if(i==k-1)
		{
			ans=max(ans,pref[i]);
		}
		else
		{
			ans=max(ans,pref[i]-pref[a]); // checking subarray sum of size k;
			a++;
		}
		
	}
	cout<<ans<<endl;
	

}
